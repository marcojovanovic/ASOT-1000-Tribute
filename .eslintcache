[{"C:\\react_asot\\src\\App.js":"1","C:\\react_asot\\src\\AsotApp.js":"2","C:\\react_asot\\src\\index.js":"3","C:\\react_asot\\src\\LandingPage.js":"4","C:\\react_asot\\src\\data.js":"5","C:\\react_asot\\src\\framerAnimations.js":"6"},{"size":446,"mtime":1612266269509,"results":"7","hashOfConfig":"8"},{"size":10981,"mtime":1612272360968,"results":"9","hashOfConfig":"8"},{"size":199,"mtime":1612266163019,"results":"10","hashOfConfig":"8"},{"size":1333,"mtime":1612555321071,"results":"11","hashOfConfig":"8"},{"size":1112,"mtime":1612272500773,"results":"12","hashOfConfig":"8"},{"size":448,"mtime":1609338662329,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rvjswu",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\react_asot\\src\\App.js",[],"C:\\react_asot\\src\\AsotApp.js",["30"],"import React, { useState, useEffect } from 'react';\r\nimport { animationTwo, transition } from './framerAnimations';\r\nimport ReactJkMusicPlayer from 'react-jinke-music-player';\r\nimport { motion } from 'framer-motion';\r\nimport LogoAsot from './images/logoAsot.png';\r\nimport './css/main.css';\r\nimport './css/animations.css';\r\nimport './css/slider.css';\r\nimport { FiPlay } from 'react-icons/fi';\r\n\r\nimport {audioList1} from './data.js'\r\n\r\n\r\n\r\nconst options = {\r\n  //izvor podataka\r\n  audioLists: audioList1,\r\n\r\n  // pocetni index od koga pocinje da se vrti lista  [type `number` default `0`]\r\n  defaultPlayIndex: 0,\r\n\r\n  // Mozez dinamicno da postavis index [type `number` default `0`]\r\n  // playIndex: 0,\r\n\r\n  // boja za temu    [ type `string: 'light' or 'dark'  ` default 'dark' ]\r\n  theme: 'dark',\r\n\r\n  // granice kretanja za draggable player\r\n  bounds: 'body',\r\n\r\n  // da li nova napravljena lista menja prethodnu ili se dodaje na kraju\r\n  clearPriorAudioLists: false,\r\n\r\n  // Play your new play list right after your new play list is loaded turn false.\r\n  // [type `boolean`, default `false`]\r\n  autoPlayInitLoadPlayList: true,\r\n\r\n  // Da li se na preload krece audio  [type `Boolean | String`, default `false`]\r\n  //\"auto|metadata|none\" \"true| false\"\r\n  preload: false,\r\n\r\n  // glassBg playera da se prikaze ili ne  [type `Boolean`, default `false`]\r\n  glassBg: false,\r\n\r\n  //Da li zadrsavas poslenje stanje u audio playeru nakon napustanja strane  [type `Boolean` default `false`]\r\n  remember: false,\r\n\r\n  // Da li mozez da brises numeru sa liste  [type `Boolean`, default `true`]\r\n  remove: true,\r\n\r\n  //inicijalna pozicija za muzicki player    [ type `Object` default '{top:0,left:0}' ]\r\n  defaultPosition: {\r\n    top: 250,\r\n    left: 95,\r\n  },\r\n\r\n  // textualna konfiguracija audio playera\r\n  playModeText: {\r\n    order: '顺序播放',\r\n    orderLoop: '列表循环',\r\n    singleLoop: '单曲循环',\r\n    shufflePlay: '随机播放',\r\n  },\r\n\r\n  //audio controller open text  [ type `String | ReactNode` default 'open']\r\n  openText: '打开',\r\n\r\n  //audio controller close text  [ type `String | ReactNode` default 'close']\r\n  closeText: '关闭',\r\n\r\n  //audio theme switch checkedText  [ type `String | ReactNode` default '-']\r\n  checkedText: '开',\r\n\r\n  //audio theme switch unCheckedText [ type `String | ReactNode` default '-']\r\n  unCheckedText: '关',\r\n\r\n  // audio list panel show text of the playlist has no songs [ type `String` | ReactNode  default 'no music']\r\n  notContentText: '暂无音乐',\r\n\r\n  panelTitle: '播放列表',\r\n\r\n  defaultPlayMode: 'order',\r\n\r\n  //audio mode        mini | full          [type `String`  default `mini`]\r\n  mode: 'mini',\r\n\r\n  /**\r\n   * [ type `Boolean` default 'false' ]\r\n   * The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true'\r\n   */\r\n  once: false,\r\n\r\n  // Da li na pocetku da na load da se automatski pusti prva numera [type `Boolean` default 'true']\r\n  autoPlay: true,\r\n\r\n  //Da li mozez na klik da menjas izmedju 2 moda, full => mini  or mini => full   [type 'Boolean' default 'true']\r\n  toggleMode: true,\r\n\r\n  //audio cover is show of the \"mini\" mode [type `Boolean` default 'true']\r\n  showMiniModeCover: true,\r\n\r\n  //audio playing progress is show of the \"mini\"  mode\r\n  showMiniProcessBar: true,\r\n\r\n  // pocetni muzicki player moze da se prevlaci po ekranu drag-drop    [type `Boolean` default `true`]\r\n  drag: true,\r\n\r\n  // prevlacenje preko progressa audio tracka [type `Boolean` default `true`]\r\n  seeked: true,\r\n\r\n  //audio controller title [type `String | ReactNode`  default <FaHeadphones/>]\r\n  // controllerTitle: <FaHeadphones />,\r\n\r\n  // Prikazi progress bar  [type `Boolean` default `true`]\r\n  showProgressLoadBar: true,\r\n\r\n  //play button display of the audio player panel   [type `Boolean` default `true`]\r\n  showPlay: true,\r\n\r\n  //reload button display of the audio player panel   [type `Boolean` default `true`]\r\n  showReload: true,\r\n\r\n  //download button display of the audio player panel   [type `Boolean` default `true`]\r\n  showDownload: true,\r\n\r\n  //loop button display of the audio player panel   [type `Boolean` default `true`]\r\n  showPlayMode: true,\r\n\r\n  //theme toggle switch  display of the audio player panel   [type `Boolean` default `true`]\r\n  showThemeSwitch: true,\r\n\r\n  //lyric display of the audio player panel   [type `Boolean` default `false`]\r\n  showLyric: true,\r\n\r\n  //Extensible custom content       [type 'Array' default '[]' ]\r\n  extendsContent: [],\r\n\r\n  //default volume of the audio player [type `Number` default `100` range `0-100`]\r\n  defaultVolume: 100,\r\n\r\n  //playModeText show time [type `Number(ms)` default `700`]\r\n  playModeShowTime: 600,\r\n\r\n  //Whether to try playing the next audio when the current audio playback fails [type `Boolean` default `true`]\r\n  loadAudioErrorPlayNext: false,\r\n\r\n  // Auto hide the cover photo if no cover photo is available [type `Boolean` default `false`]\r\n  autoHiddenCover: true,\r\n\r\n  //Music is downloaded handle\r\n  onAudioDownload(audioInfo) {\r\n    console.log('audio download', audioInfo);\r\n  },\r\n\r\n  //audio play handle\r\n  onAudioPlay(audioInfo) {\r\n    console.log('audio playing', audioInfo);\r\n  },\r\n\r\n  //audio pause handle\r\n  onAudioPause(audioInfo) {\r\n    console.log('audio pause', audioInfo);\r\n  },\r\n\r\n  //When the user has moved/jumped to a new location in audio\r\n  onAudioSeeked(audioInfo) {\r\n    console.log('audio seeked', audioInfo);\r\n  },\r\n\r\n  //When the volume has changed  min = 0.0  max = 1.0\r\n  onAudioVolumeChange(currentVolume) {\r\n    console.log('audio volume change', currentVolume);\r\n  },\r\n\r\n  //The single song is ended handle\r\n  onAudioEnded(audioInfo) {\r\n    // swal('Audio is ended!', '', 'success')\r\n    console.log('audio ended', audioInfo);\r\n  },\r\n\r\n  //audio load abort The target event like {...,audioName:xx,audioSrc:xx,playMode:xx}\r\n  onAudioAbort(e) {\r\n    console.log('audio abort', e);\r\n  },\r\n\r\n  //audio play progress handle\r\n  onAudioProgress(audioInfo) {\r\n    // console.log('audio progress',audioInfo);\r\n  },\r\n\r\n  //audio reload handle\r\n  onAudioReload(audioInfo) {\r\n    console.log('audio reload:', audioInfo);\r\n  },\r\n\r\n  //audio load failed error handle\r\n  onAudioLoadError(e) {\r\n    console.error('audio load err', e);\r\n  },\r\n\r\n  //theme change handle\r\n  onThemeChange(theme) {\r\n    console.log('theme change:', theme);\r\n  },\r\n\r\n  onAudioListsChange(currentPlayId, audioLists, audioInfo) {\r\n    console.log('[currentPlayId] audio lists change:', currentPlayId);\r\n    console.log('[audioLists] audio lists change:', audioLists);\r\n    console.log('[audioInfo] audio lists change:', audioInfo);\r\n  },\r\n\r\n  onAudioPlayTrackChange(currentPlayId, audioLists, audioInfo) {\r\n    console.log(\r\n      'audio play track change:',\r\n      currentPlayId,\r\n      audioLists,\r\n      audioInfo\r\n    );\r\n  },\r\n\r\n  onPlayModeChange(playMode) {\r\n    console.log('play mode change:', playMode);\r\n  },\r\n\r\n  onModeChange(mode) {\r\n    console.log('mode change:', mode);\r\n  },\r\n\r\n  onAudioListsPanelChange(panelVisible) {\r\n    console.log('audio lists panel visible:', panelVisible);\r\n  },\r\n\r\n  onAudioListsDragEnd(fromIndex, endIndex) {\r\n    console.log('audio lists drag end:', fromIndex, endIndex);\r\n  },\r\n\r\n  onAudioLyricChange(lineNum, currentLyric) {\r\n    console.log('audio lyric change:', lineNum, currentLyric);\r\n  },\r\n\r\n  // custom music player root node\r\n  getContainer() {\r\n    return document.body;\r\n  },\r\n\r\n  /**\r\n   * @description get origin audio element instance , you can use it do everything\r\n   * @example\r\n   * audio.playbackRate = 1.5  // set play back rate\r\n   * audio.crossOrigin = 'xxx' // config cross origin\r\n   */\r\n  getAudioInstance(audio) {\r\n    console.log('audio instance', audio);\r\n  },\r\n\r\n  // transform audio info like return a Promise\r\n\r\n  /**\r\n   * @return\r\n   *  {\r\n   *    src: 'xxx',\r\n   *    filename: 'xxx',\r\n   *    mimeType: 'xxx'\r\n   *  }\r\n   */\r\n  // onBeforeAudioDownload() {\r\n  //   return Promise.resolve({\r\n  //     src: '1.mp3'\r\n  //   })\r\n  // }\r\n};\r\n\r\nfunction AsotApp() {\r\n  const [play, setPlay] = useState(false);\r\n  const [audioInstance, setAudioInstance] = useState();\r\n\r\n  const getAudioInstance = (instance) => {\r\n    console.log('Getting audio instance', instance);\r\n    setAudioInstance(instance);\r\n  };\r\n\r\n  const onPlayHandler = () => setPlay(true);\r\n  const onPauseHandler = () => setPlay(false);\r\n\r\n  useEffect(() => {\r\n    console.log('Updated audio instance', audioInstance);\r\n  }, [audioInstance]);\r\n\r\n  return (\r\n    <motion.div\r\n      initial=\"out\"\r\n      animate=\"end\"\r\n      exit=\"out\"\r\n      variants={animationTwo}\r\n      transition={transition}\r\n      className=\"main\"\r\n    >\r\n      <div id=\"stars3\"></div>\r\n      <div id=\"stars2\"></div>\r\n      <div className=\"music-container\">\r\n        <div id=\"stars\"></div>\r\n\r\n        <img src={LogoAsot} alt=\"\" className=\"logo-1\" />\r\n        <div className=\"music-glass\">\r\n          <div className=\"music-bg\"></div>\r\n          <div className=\"rest\">\r\n            <div className=\"asot-card\">\r\n              <div className=\"asot-card--header\"></div>\r\n              <div className=\"asot-card--body\">\r\n                <div className='asot-top1000'>\r\n                  <a href='https://www.youtube.com/watch?v=P6l5Y5BgEns&t=111s'>ASOT TOP 1000 </a>\r\n                </div>\r\n                <div className=\"asot-card--item\">\r\n                  <div>\r\n                    <h2 className=\"asot-card--subtitle\">Utreht</h2>\r\n                    <h5 className=\"asot-card--country\">Holandija</h5>\r\n                  </div>\r\n                  <h5> 3 & 4 septembar</h5>\r\n                  <a href='https://festival.astateoftrance.com/'>{<FiPlay className='asot-icon' />}</a>\r\n                </div>\r\n                <div className=\"asot-card--item\">\r\n                  <div>\r\n                    <h2 className=\"asot-card--subtitle\">Krakow</h2>\r\n                    <h5 className=\"asot-card--country\">Poljska</h5>\r\n                  </div>\r\n                  <h5> Oktobar 2021</h5>\r\n                  <a href='https://festival.astateoftrance.com/'>{<FiPlay className='asot-icon' />}</a>\r\n                </div>\r\n                <div className=\"asot-card--item\">\r\n                  <div>\r\n                    <h2 className=\"asot-card--subtitle\">Moskva</h2>\r\n                    <h5 className=\"asot-card--country\">Rusija</h5>\r\n                  </div>\r\n                  <h5>Oktobar 2021</h5>\r\n                  <a href=\"https://festival.astateoftrance.com/\">{<FiPlay className='asot-icon'/>}</a>\r\n                </div>\r\n              \r\n              </div>\r\n            </div>\r\n          </div>\r\n          <ReactJkMusicPlayer\r\n            {...options}\r\n            getAudioInstance={getAudioInstance}\r\n            onAudioPlay={onPlayHandler}\r\n            onAudioPause={onPauseHandler}\r\n          />\r\n        </div>\r\n        <img src={LogoAsot} alt=\"\" className=\"logo-2\" />\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default AsotApp;\r\n",["31","32"],"C:\\react_asot\\src\\index.js",[],["33","34"],"C:\\react_asot\\src\\LandingPage.js",["35"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport zero from './images/1000.png';\r\nimport './css/landingPage.css';\r\nimport { motion } from 'framer-motion';\r\nimport { BackgroundImage } from 'react-image-and-background-image-fade';\r\n\r\nfunction LandingPage() {\r\n  return (\r\n    <BackgroundImage\r\n      className=\"landing\"\r\n      src='/accets/alter2.jpg'\r\n      height='100vh'\r\n    >\r\n      <motion.h1 className=\"landing-center\"\r\n      \r\n      initial={{ rotate:'180deg', transitionDelay:2 }}\r\n      animate={{ rotate:'-720deg', transitionDelay:2 }}\r\n      transition={{ duration: 0.5 }}\r\n      >\r\n        A State <span className=\"landing-span\">of</span> Trance\r\n        <span>\r\n          <img className=\"landing-img\" src={zero} alt=\"\" />\r\n        </span>\r\n        Celebration\r\n      </motion.h1>\r\n      <Link to=\"/asot\">\r\n        <motion.div\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ duration: 6 }}\r\n          className=\"button_base b07_3d_double_roll\"\r\n        >\r\n          <a className=\"btn\" href=\"#\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n            Enter ASOT\r\n          </a>\r\n        </motion.div>\r\n      </Link>\r\n    </BackgroundImage>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","C:\\react_asot\\src\\data.js",[],"C:\\react_asot\\src\\framerAnimations.js",[],{"ruleId":"36","severity":1,"message":"37","line":274,"column":10,"nodeType":"38","messageId":"39","endLine":274,"endColumn":14},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"40","replacedBy":"44"},{"ruleId":"42","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":34,"column":11,"nodeType":"48","endLine":34,"endColumn":39},"no-unused-vars","'play' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["49"],"no-negated-in-lhs",["50"],["49"],["50"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]